/* eslint-disable no-unused-vars */
/* eslint-disable no-undef */
/* eslint-disable no-redeclare */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.account_service.ActivateAccountRequest', null, global)
goog.exportSymbol('proto.account_service.ActivateAccountResponse', null, global)
goog.exportSymbol('proto.account_service.CreateAccountRequest', null, global)
goog.exportSymbol('proto.account_service.CreateAccountResponse', null, global)
goog.exportSymbol('proto.account_service.DeleteAccountRequest', null, global)
goog.exportSymbol('proto.account_service.DeleteAccountResponse', null, global)
goog.exportSymbol('proto.account_service.GetAccountRequest', null, global)
goog.exportSymbol('proto.account_service.GetAccountResponse', null, global)
goog.exportSymbol('proto.account_service.ListUsersRequest', null, global)
goog.exportSymbol('proto.account_service.ListUsersResponse', null, global)
goog.exportSymbol('proto.account_service.LockAccountRequest', null, global)
goog.exportSymbol('proto.account_service.LockAccountResponse', null, global)
goog.exportSymbol('proto.account_service.LoginRequest', null, global)
goog.exportSymbol('proto.account_service.LoginResponse', null, global)
goog.exportSymbol('proto.account_service.LogoutRequest', null, global)
goog.exportSymbol('proto.account_service.LogoutResponse', null, global)
goog.exportSymbol('proto.account_service.RequestUnlockAccountRequest', null, global)
goog.exportSymbol('proto.account_service.RequestUnlockAccountResponse', null, global)
goog.exportSymbol('proto.account_service.ResendActivationMailRequest', null, global)
goog.exportSymbol('proto.account_service.ResendActivationMailResponse', null, global)
goog.exportSymbol('proto.account_service.ResetPasswordRequest', null, global)
goog.exportSymbol('proto.account_service.ResetPasswordResponse', null, global)
goog.exportSymbol('proto.account_service.UnlockAccountRequest', null, global)
goog.exportSymbol('proto.account_service.UnlockAccountResponse', null, global)
goog.exportSymbol('proto.account_service.UpdateAccountRequest', null, global)
goog.exportSymbol('proto.account_service.UpdateAccountResponse', null, global)
goog.exportSymbol('proto.account_service.User', null, global)

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.User, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.User.displayName = 'proto.account_service.User'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.User.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.User.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.User.toObject = function(includeInstance, msg) {
    var f, obj = {
      firstName: jspb.Message.getFieldWithDefault(msg, 1, ''),
      lastName: jspb.Message.getFieldWithDefault(msg, 2, ''),
      birthday: jspb.Message.getFieldWithDefault(msg, 3, ''),
      email: jspb.Message.getFieldWithDefault(msg, 4, ''),
      username: jspb.Message.getFieldWithDefault(msg, 5, ''),
      password: jspb.Message.getFieldWithDefault(msg, 6, ''),
      phoneNumber: jspb.Message.getFieldWithDefault(msg, 7, ''),
      photo: msg.getPhoto_asB64(),
      availableMb: jspb.Message.getFieldWithDefault(msg, 9, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.User}
 */
proto.account_service.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.User
  return proto.account_service.User.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.User}
 */
proto.account_service.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString())
      msg.setFirstName(value)
      break
    case 2:
      var value = /** @type {string} */ (reader.readString())
      msg.setLastName(value)
      break
    case 3:
      var value = /** @type {string} */ (reader.readString())
      msg.setBirthday(value)
      break
    case 4:
      var value = /** @type {string} */ (reader.readString())
      msg.setEmail(value)
      break
    case 5:
      var value = /** @type {string} */ (reader.readString())
      msg.setUsername(value)
      break
    case 6:
      var value = /** @type {string} */ (reader.readString())
      msg.setPassword(value)
      break
    case 7:
      var value = /** @type {string} */ (reader.readString())
      msg.setPhoneNumber(value)
      break
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setPhoto(value)
      break
    case 9:
      var value = /** @type {number} */ (reader.readUint32())
      msg.setAvailableMb(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.User.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getFirstName()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getLastName()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getBirthday()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
  f = message.getEmail()
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    )
  }
  f = message.getUsername()
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    )
  }
  f = message.getPassword()
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    )
  }
  f = message.getPhoneNumber()
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    )
  }
  f = message.getPhoto_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    )
  }
  f = message.getAvailableMb()
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    )
  }
}


/**
 * optional string first_name = 1;
 * @return {string}
 */
proto.account_service.User.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.account_service.User.prototype.setFirstName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional string last_name = 2;
 * @return {string}
 */
proto.account_service.User.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.account_service.User.prototype.setLastName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional string birthday = 3;
 * @return {string}
 */
proto.account_service.User.prototype.getBirthday = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}


/** @param {string} value */
proto.account_service.User.prototype.setBirthday = function(value) {
  jspb.Message.setProto3StringField(this, 3, value)
}


/**
 * optional string email = 4;
 * @return {string}
 */
proto.account_service.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}


/** @param {string} value */
proto.account_service.User.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 4, value)
}


/**
 * optional string username = 5;
 * @return {string}
 */
proto.account_service.User.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}


/** @param {string} value */
proto.account_service.User.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 5, value)
}


/**
 * optional string password = 6;
 * @return {string}
 */
proto.account_service.User.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}


/** @param {string} value */
proto.account_service.User.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 6, value)
}


/**
 * optional string phone_number = 7;
 * @return {string}
 */
proto.account_service.User.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}


/** @param {string} value */
proto.account_service.User.prototype.setPhoneNumber = function(value) {
  jspb.Message.setProto3StringField(this, 7, value)
}


/**
 * optional bytes photo = 8;
 * @return {!(string|Uint8Array)}
 */
proto.account_service.User.prototype.getPhoto = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}


/**
 * optional bytes photo = 8;
 * This is a type-conversion wrapper around `getPhoto()`
 * @return {string}
 */
proto.account_service.User.prototype.getPhoto_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getPhoto()))
}


/**
 * optional bytes photo = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPhoto()`
 * @return {!Uint8Array}
 */
proto.account_service.User.prototype.getPhoto_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getPhoto()))
}


/** @param {!(string|Uint8Array)} value */
proto.account_service.User.prototype.setPhoto = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value)
}


/**
 * optional uint32 available_mb = 9;
 * @return {number}
 */
proto.account_service.User.prototype.getAvailableMb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0))
}


/** @param {number} value */
proto.account_service.User.prototype.setAvailableMb = function(value) {
  jspb.Message.setProto3IntField(this, 9, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.CreateAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.CreateAccountRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.CreateAccountRequest.displayName = 'proto.account_service.CreateAccountRequest'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.CreateAccountRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.CreateAccountRequest.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.CreateAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.CreateAccountRequest.toObject = function(includeInstance, msg) {
    var f, obj = {
      user: (f = msg.getUser()) && proto.account_service.User.toObject(includeInstance, f),
      creationDate: jspb.Message.getFieldWithDefault(msg, 2, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.CreateAccountRequest}
 */
proto.account_service.CreateAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.CreateAccountRequest
  return proto.account_service.CreateAccountRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.CreateAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.CreateAccountRequest}
 */
proto.account_service.CreateAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = new proto.account_service.User
      reader.readMessage(value,proto.account_service.User.deserializeBinaryFromReader)
      msg.setUser(value)
      break
    case 2:
      var value = /** @type {string} */ (reader.readString())
      msg.setCreationDate(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.CreateAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.CreateAccountRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.CreateAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.CreateAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getUser()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.account_service.User.serializeBinaryToWriter
    )
  }
  f = message.getCreationDate()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
}


/**
 * optional User user = 1;
 * @return {?proto.account_service.User}
 */
proto.account_service.CreateAccountRequest.prototype.getUser = function() {
  return /** @type{?proto.account_service.User} */ (
    jspb.Message.getWrapperField(this, proto.account_service.User, 1))
}


/** @param {?proto.account_service.User|undefined} value */
proto.account_service.CreateAccountRequest.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value)
}


proto.account_service.CreateAccountRequest.prototype.clearUser = function() {
  this.setUser(undefined)
}


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.account_service.CreateAccountRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null
}


/**
 * optional string creation_date = 2;
 * @return {string}
 */
proto.account_service.CreateAccountRequest.prototype.getCreationDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.account_service.CreateAccountRequest.prototype.setCreationDate = function(value) {
  jspb.Message.setProto3StringField(this, 2, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.CreateAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.CreateAccountResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.CreateAccountResponse.displayName = 'proto.account_service.CreateAccountResponse'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.CreateAccountResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.CreateAccountResponse.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.CreateAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.CreateAccountResponse.toObject = function(includeInstance, msg) {
    var f, obj = {
      userId: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.CreateAccountResponse}
 */
proto.account_service.CreateAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.CreateAccountResponse
  return proto.account_service.CreateAccountResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.CreateAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.CreateAccountResponse}
 */
proto.account_service.CreateAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString())
      msg.setUserId(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.CreateAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.CreateAccountResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.CreateAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.CreateAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getUserId()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.account_service.CreateAccountResponse.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.account_service.CreateAccountResponse.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.ActivateAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.ActivateAccountRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.ActivateAccountRequest.displayName = 'proto.account_service.ActivateAccountRequest'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.ActivateAccountRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.ActivateAccountRequest.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.ActivateAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.ActivateAccountRequest.toObject = function(includeInstance, msg) {
    var f, obj = {
      activationToken: msg.getActivationToken_asB64(),
      activationDate: jspb.Message.getFieldWithDefault(msg, 2, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.ActivateAccountRequest}
 */
proto.account_service.ActivateAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.ActivateAccountRequest
  return proto.account_service.ActivateAccountRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.ActivateAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.ActivateAccountRequest}
 */
proto.account_service.ActivateAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setActivationToken(value)
      break
    case 2:
      var value = /** @type {string} */ (reader.readString())
      msg.setActivationDate(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.ActivateAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.ActivateAccountRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.ActivateAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.ActivateAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getActivationToken_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
  f = message.getActivationDate()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
}


/**
 * optional bytes activation_token = 1;
 * @return {!(string|Uint8Array)}
 */
proto.account_service.ActivateAccountRequest.prototype.getActivationToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/**
 * optional bytes activation_token = 1;
 * This is a type-conversion wrapper around `getActivationToken()`
 * @return {string}
 */
proto.account_service.ActivateAccountRequest.prototype.getActivationToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getActivationToken()))
}


/**
 * optional bytes activation_token = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getActivationToken()`
 * @return {!Uint8Array}
 */
proto.account_service.ActivateAccountRequest.prototype.getActivationToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getActivationToken()))
}


/** @param {!(string|Uint8Array)} value */
proto.account_service.ActivateAccountRequest.prototype.setActivationToken = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}


/**
 * optional string activation_date = 2;
 * @return {string}
 */
proto.account_service.ActivateAccountRequest.prototype.getActivationDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.account_service.ActivateAccountRequest.prototype.setActivationDate = function(value) {
  jspb.Message.setProto3StringField(this, 2, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.ActivateAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.ActivateAccountResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.ActivateAccountResponse.displayName = 'proto.account_service.ActivateAccountResponse'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.ActivateAccountResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.ActivateAccountResponse.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.ActivateAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.ActivateAccountResponse.toObject = function(includeInstance, msg) {
    var f, obj = {
      sessionToken: msg.getSessionToken_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.ActivateAccountResponse}
 */
proto.account_service.ActivateAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.ActivateAccountResponse
  return proto.account_service.ActivateAccountResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.ActivateAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.ActivateAccountResponse}
 */
proto.account_service.ActivateAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setSessionToken(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.ActivateAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.ActivateAccountResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.ActivateAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.ActivateAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getSessionToken_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
}


/**
 * optional bytes session_token = 1;
 * @return {!(string|Uint8Array)}
 */
proto.account_service.ActivateAccountResponse.prototype.getSessionToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/**
 * optional bytes session_token = 1;
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {string}
 */
proto.account_service.ActivateAccountResponse.prototype.getSessionToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getSessionToken()))
}


/**
 * optional bytes session_token = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {!Uint8Array}
 */
proto.account_service.ActivateAccountResponse.prototype.getSessionToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSessionToken()))
}


/** @param {!(string|Uint8Array)} value */
proto.account_service.ActivateAccountResponse.prototype.setSessionToken = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.ResendActivationMailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.ResendActivationMailRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.ResendActivationMailRequest.displayName = 'proto.account_service.ResendActivationMailRequest'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.ResendActivationMailRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.ResendActivationMailRequest.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.ResendActivationMailRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.ResendActivationMailRequest.toObject = function(includeInstance, msg) {
    var f, obj = {
      email: jspb.Message.getFieldWithDefault(msg, 1, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.ResendActivationMailRequest}
 */
proto.account_service.ResendActivationMailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.ResendActivationMailRequest
  return proto.account_service.ResendActivationMailRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.ResendActivationMailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.ResendActivationMailRequest}
 */
proto.account_service.ResendActivationMailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString())
      msg.setEmail(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.ResendActivationMailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.ResendActivationMailRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.ResendActivationMailRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.ResendActivationMailRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getEmail()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
}


/**
 * optional string email = 1;
 * @return {string}
 */
proto.account_service.ResendActivationMailRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.account_service.ResendActivationMailRequest.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 1, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.ResendActivationMailResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.ResendActivationMailResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.ResendActivationMailResponse.displayName = 'proto.account_service.ResendActivationMailResponse'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.ResendActivationMailResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.ResendActivationMailResponse.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.ResendActivationMailResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.ResendActivationMailResponse.toObject = function(includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.ResendActivationMailResponse}
 */
proto.account_service.ResendActivationMailResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.ResendActivationMailResponse
  return proto.account_service.ResendActivationMailResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.ResendActivationMailResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.ResendActivationMailResponse}
 */
proto.account_service.ResendActivationMailResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.ResendActivationMailResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.ResendActivationMailResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.ResendActivationMailResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.ResendActivationMailResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.UpdateAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.UpdateAccountRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.UpdateAccountRequest.displayName = 'proto.account_service.UpdateAccountRequest'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.UpdateAccountRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.UpdateAccountRequest.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.UpdateAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.UpdateAccountRequest.toObject = function(includeInstance, msg) {
    var f, obj = {
      user: (f = msg.getUser()) && proto.account_service.User.toObject(includeInstance, f),
      creationDate: jspb.Message.getFieldWithDefault(msg, 2, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.UpdateAccountRequest}
 */
proto.account_service.UpdateAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.UpdateAccountRequest
  return proto.account_service.UpdateAccountRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.UpdateAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.UpdateAccountRequest}
 */
proto.account_service.UpdateAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = new proto.account_service.User
      reader.readMessage(value,proto.account_service.User.deserializeBinaryFromReader)
      msg.setUser(value)
      break
    case 2:
      var value = /** @type {string} */ (reader.readString())
      msg.setCreationDate(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.UpdateAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.UpdateAccountRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.UpdateAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.UpdateAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getUser()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.account_service.User.serializeBinaryToWriter
    )
  }
  f = message.getCreationDate()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
}


/**
 * optional User user = 1;
 * @return {?proto.account_service.User}
 */
proto.account_service.UpdateAccountRequest.prototype.getUser = function() {
  return /** @type{?proto.account_service.User} */ (
    jspb.Message.getWrapperField(this, proto.account_service.User, 1))
}


/** @param {?proto.account_service.User|undefined} value */
proto.account_service.UpdateAccountRequest.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value)
}


proto.account_service.UpdateAccountRequest.prototype.clearUser = function() {
  this.setUser(undefined)
}


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.account_service.UpdateAccountRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null
}


/**
 * optional string creation_date = 2;
 * @return {string}
 */
proto.account_service.UpdateAccountRequest.prototype.getCreationDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.account_service.UpdateAccountRequest.prototype.setCreationDate = function(value) {
  jspb.Message.setProto3StringField(this, 2, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.UpdateAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.UpdateAccountResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.UpdateAccountResponse.displayName = 'proto.account_service.UpdateAccountResponse'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.UpdateAccountResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.UpdateAccountResponse.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.UpdateAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.UpdateAccountResponse.toObject = function(includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.UpdateAccountResponse}
 */
proto.account_service.UpdateAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.UpdateAccountResponse
  return proto.account_service.UpdateAccountResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.UpdateAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.UpdateAccountResponse}
 */
proto.account_service.UpdateAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.UpdateAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.UpdateAccountResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.UpdateAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.UpdateAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.DeleteAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.DeleteAccountRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.DeleteAccountRequest.displayName = 'proto.account_service.DeleteAccountRequest'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.DeleteAccountRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.DeleteAccountRequest.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.DeleteAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.DeleteAccountRequest.toObject = function(includeInstance, msg) {
    var f, obj = {
      sessionToken: msg.getSessionToken_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.DeleteAccountRequest}
 */
proto.account_service.DeleteAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.DeleteAccountRequest
  return proto.account_service.DeleteAccountRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.DeleteAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.DeleteAccountRequest}
 */
proto.account_service.DeleteAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setSessionToken(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.DeleteAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.DeleteAccountRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.DeleteAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.DeleteAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getSessionToken_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
}


/**
 * optional bytes session_token = 1;
 * @return {!(string|Uint8Array)}
 */
proto.account_service.DeleteAccountRequest.prototype.getSessionToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/**
 * optional bytes session_token = 1;
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {string}
 */
proto.account_service.DeleteAccountRequest.prototype.getSessionToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getSessionToken()))
}


/**
 * optional bytes session_token = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {!Uint8Array}
 */
proto.account_service.DeleteAccountRequest.prototype.getSessionToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSessionToken()))
}


/** @param {!(string|Uint8Array)} value */
proto.account_service.DeleteAccountRequest.prototype.setSessionToken = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.DeleteAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.DeleteAccountResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.DeleteAccountResponse.displayName = 'proto.account_service.DeleteAccountResponse'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.DeleteAccountResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.DeleteAccountResponse.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.DeleteAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.DeleteAccountResponse.toObject = function(includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.DeleteAccountResponse}
 */
proto.account_service.DeleteAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.DeleteAccountResponse
  return proto.account_service.DeleteAccountResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.DeleteAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.DeleteAccountResponse}
 */
proto.account_service.DeleteAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.DeleteAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.DeleteAccountResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.DeleteAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.DeleteAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.GetAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.GetAccountRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.GetAccountRequest.displayName = 'proto.account_service.GetAccountRequest'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.GetAccountRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.GetAccountRequest.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.GetAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.GetAccountRequest.toObject = function(includeInstance, msg) {
    var f, obj = {
      sessionToken: msg.getSessionToken_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.GetAccountRequest}
 */
proto.account_service.GetAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.GetAccountRequest
  return proto.account_service.GetAccountRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.GetAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.GetAccountRequest}
 */
proto.account_service.GetAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setSessionToken(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.GetAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.GetAccountRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.GetAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.GetAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getSessionToken_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
}


/**
 * optional bytes session_token = 1;
 * @return {!(string|Uint8Array)}
 */
proto.account_service.GetAccountRequest.prototype.getSessionToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/**
 * optional bytes session_token = 1;
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {string}
 */
proto.account_service.GetAccountRequest.prototype.getSessionToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getSessionToken()))
}


/**
 * optional bytes session_token = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {!Uint8Array}
 */
proto.account_service.GetAccountRequest.prototype.getSessionToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSessionToken()))
}


/** @param {!(string|Uint8Array)} value */
proto.account_service.GetAccountRequest.prototype.setSessionToken = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.GetAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.GetAccountResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.GetAccountResponse.displayName = 'proto.account_service.GetAccountResponse'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.GetAccountResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.GetAccountResponse.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.GetAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.GetAccountResponse.toObject = function(includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.GetAccountResponse}
 */
proto.account_service.GetAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.GetAccountResponse
  return proto.account_service.GetAccountResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.GetAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.GetAccountResponse}
 */
proto.account_service.GetAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.GetAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.GetAccountResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.GetAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.GetAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.LoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.LoginRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.LoginRequest.displayName = 'proto.account_service.LoginRequest'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.LoginRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.LoginRequest.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.LoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.LoginRequest.toObject = function(includeInstance, msg) {
    var f, obj = {
      username: jspb.Message.getFieldWithDefault(msg, 1, ''),
      password: jspb.Message.getFieldWithDefault(msg, 2, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.LoginRequest}
 */
proto.account_service.LoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.LoginRequest
  return proto.account_service.LoginRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.LoginRequest}
 */
proto.account_service.LoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString())
      msg.setUsername(value)
      break
    case 2:
      var value = /** @type {string} */ (reader.readString())
      msg.setPassword(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.LoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.LoginRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.LoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getUsername()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getPassword()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
}


/**
 * optional string username = 1;
 * @return {string}
 */
proto.account_service.LoginRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.account_service.LoginRequest.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional string password = 2;
 * @return {string}
 */
proto.account_service.LoginRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.account_service.LoginRequest.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.LoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.LoginResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.LoginResponse.displayName = 'proto.account_service.LoginResponse'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.LoginResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.LoginResponse.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.LoginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.LoginResponse.toObject = function(includeInstance, msg) {
    var f, obj = {
      sessionToken: msg.getSessionToken_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.LoginResponse}
 */
proto.account_service.LoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.LoginResponse
  return proto.account_service.LoginResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.LoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.LoginResponse}
 */
proto.account_service.LoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setSessionToken(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.LoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.LoginResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.LoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.LoginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getSessionToken_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
}


/**
 * optional bytes session_token = 1;
 * @return {!(string|Uint8Array)}
 */
proto.account_service.LoginResponse.prototype.getSessionToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/**
 * optional bytes session_token = 1;
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {string}
 */
proto.account_service.LoginResponse.prototype.getSessionToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getSessionToken()))
}


/**
 * optional bytes session_token = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {!Uint8Array}
 */
proto.account_service.LoginResponse.prototype.getSessionToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSessionToken()))
}


/** @param {!(string|Uint8Array)} value */
proto.account_service.LoginResponse.prototype.setSessionToken = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.LogoutRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.LogoutRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.LogoutRequest.displayName = 'proto.account_service.LogoutRequest'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.LogoutRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.LogoutRequest.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.LogoutRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.LogoutRequest.toObject = function(includeInstance, msg) {
    var f, obj = {
      sessionToken: msg.getSessionToken_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.LogoutRequest}
 */
proto.account_service.LogoutRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.LogoutRequest
  return proto.account_service.LogoutRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.LogoutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.LogoutRequest}
 */
proto.account_service.LogoutRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setSessionToken(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.LogoutRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.LogoutRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.LogoutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.LogoutRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getSessionToken_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
}


/**
 * optional bytes session_token = 1;
 * @return {!(string|Uint8Array)}
 */
proto.account_service.LogoutRequest.prototype.getSessionToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/**
 * optional bytes session_token = 1;
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {string}
 */
proto.account_service.LogoutRequest.prototype.getSessionToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getSessionToken()))
}


/**
 * optional bytes session_token = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {!Uint8Array}
 */
proto.account_service.LogoutRequest.prototype.getSessionToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSessionToken()))
}


/** @param {!(string|Uint8Array)} value */
proto.account_service.LogoutRequest.prototype.setSessionToken = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.LogoutResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.LogoutResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.LogoutResponse.displayName = 'proto.account_service.LogoutResponse'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.LogoutResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.LogoutResponse.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.LogoutResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.LogoutResponse.toObject = function(includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.LogoutResponse}
 */
proto.account_service.LogoutResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.LogoutResponse
  return proto.account_service.LogoutResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.LogoutResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.LogoutResponse}
 */
proto.account_service.LogoutResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.LogoutResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.LogoutResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.LogoutResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.LogoutResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.ResetPasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.ResetPasswordRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.ResetPasswordRequest.displayName = 'proto.account_service.ResetPasswordRequest'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.ResetPasswordRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.ResetPasswordRequest.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.ResetPasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.ResetPasswordRequest.toObject = function(includeInstance, msg) {
    var f, obj = {
      sessionToken: msg.getSessionToken_asB64(),
      email: jspb.Message.getFieldWithDefault(msg, 2, ''),
      oldPassword: jspb.Message.getFieldWithDefault(msg, 3, ''),
      newPassword: jspb.Message.getFieldWithDefault(msg, 4, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.ResetPasswordRequest}
 */
proto.account_service.ResetPasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.ResetPasswordRequest
  return proto.account_service.ResetPasswordRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.ResetPasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.ResetPasswordRequest}
 */
proto.account_service.ResetPasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setSessionToken(value)
      break
    case 2:
      var value = /** @type {string} */ (reader.readString())
      msg.setEmail(value)
      break
    case 3:
      var value = /** @type {string} */ (reader.readString())
      msg.setOldPassword(value)
      break
    case 4:
      var value = /** @type {string} */ (reader.readString())
      msg.setNewPassword(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.ResetPasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.ResetPasswordRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.ResetPasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.ResetPasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getSessionToken_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
  f = message.getEmail()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getOldPassword()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
  f = message.getNewPassword()
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    )
  }
}


/**
 * optional bytes session_token = 1;
 * @return {!(string|Uint8Array)}
 */
proto.account_service.ResetPasswordRequest.prototype.getSessionToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/**
 * optional bytes session_token = 1;
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {string}
 */
proto.account_service.ResetPasswordRequest.prototype.getSessionToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getSessionToken()))
}


/**
 * optional bytes session_token = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {!Uint8Array}
 */
proto.account_service.ResetPasswordRequest.prototype.getSessionToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSessionToken()))
}


/** @param {!(string|Uint8Array)} value */
proto.account_service.ResetPasswordRequest.prototype.setSessionToken = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}


/**
 * optional string email = 2;
 * @return {string}
 */
proto.account_service.ResetPasswordRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.account_service.ResetPasswordRequest.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * optional string old_password = 3;
 * @return {string}
 */
proto.account_service.ResetPasswordRequest.prototype.getOldPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}


/** @param {string} value */
proto.account_service.ResetPasswordRequest.prototype.setOldPassword = function(value) {
  jspb.Message.setProto3StringField(this, 3, value)
}


/**
 * optional string new_password = 4;
 * @return {string}
 */
proto.account_service.ResetPasswordRequest.prototype.getNewPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}


/** @param {string} value */
proto.account_service.ResetPasswordRequest.prototype.setNewPassword = function(value) {
  jspb.Message.setProto3StringField(this, 4, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.ResetPasswordResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.ResetPasswordResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.ResetPasswordResponse.displayName = 'proto.account_service.ResetPasswordResponse'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.ResetPasswordResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.ResetPasswordResponse.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.ResetPasswordResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.ResetPasswordResponse.toObject = function(includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.ResetPasswordResponse}
 */
proto.account_service.ResetPasswordResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.ResetPasswordResponse
  return proto.account_service.ResetPasswordResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.ResetPasswordResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.ResetPasswordResponse}
 */
proto.account_service.ResetPasswordResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.ResetPasswordResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.ResetPasswordResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.ResetPasswordResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.ResetPasswordResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.LockAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.LockAccountRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.LockAccountRequest.displayName = 'proto.account_service.LockAccountRequest'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.LockAccountRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.LockAccountRequest.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.LockAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.LockAccountRequest.toObject = function(includeInstance, msg) {
    var f, obj = {
      sessionToken: msg.getSessionToken_asB64()
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.LockAccountRequest}
 */
proto.account_service.LockAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.LockAccountRequest
  return proto.account_service.LockAccountRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.LockAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.LockAccountRequest}
 */
proto.account_service.LockAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes())
      msg.setSessionToken(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.LockAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.LockAccountRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.LockAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.LockAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getSessionToken_asU8()
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    )
  }
}


/**
 * optional bytes session_token = 1;
 * @return {!(string|Uint8Array)}
 */
proto.account_service.LockAccountRequest.prototype.getSessionToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/**
 * optional bytes session_token = 1;
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {string}
 */
proto.account_service.LockAccountRequest.prototype.getSessionToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getSessionToken()))
}


/**
 * optional bytes session_token = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionToken()`
 * @return {!Uint8Array}
 */
proto.account_service.LockAccountRequest.prototype.getSessionToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSessionToken()))
}


/** @param {!(string|Uint8Array)} value */
proto.account_service.LockAccountRequest.prototype.setSessionToken = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.LockAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.LockAccountResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.LockAccountResponse.displayName = 'proto.account_service.LockAccountResponse'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.LockAccountResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.LockAccountResponse.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.LockAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.LockAccountResponse.toObject = function(includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.LockAccountResponse}
 */
proto.account_service.LockAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.LockAccountResponse
  return proto.account_service.LockAccountResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.LockAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.LockAccountResponse}
 */
proto.account_service.LockAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.LockAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.LockAccountResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.LockAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.LockAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.UnlockAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.UnlockAccountRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.UnlockAccountRequest.displayName = 'proto.account_service.UnlockAccountRequest'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.UnlockAccountRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.UnlockAccountRequest.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.UnlockAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.UnlockAccountRequest.toObject = function(includeInstance, msg) {
    var f, obj = {
      email: jspb.Message.getFieldWithDefault(msg, 1, ''),
      token: jspb.Message.getFieldWithDefault(msg, 2, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.UnlockAccountRequest}
 */
proto.account_service.UnlockAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.UnlockAccountRequest
  return proto.account_service.UnlockAccountRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.UnlockAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.UnlockAccountRequest}
 */
proto.account_service.UnlockAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString())
      msg.setEmail(value)
      break
    case 2:
      var value = /** @type {string} */ (reader.readString())
      msg.setToken(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.UnlockAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.UnlockAccountRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.UnlockAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.UnlockAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getEmail()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getToken()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
}


/**
 * optional string email = 1;
 * @return {string}
 */
proto.account_service.UnlockAccountRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.account_service.UnlockAccountRequest.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional string token = 2;
 * @return {string}
 */
proto.account_service.UnlockAccountRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.account_service.UnlockAccountRequest.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.UnlockAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.UnlockAccountResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.UnlockAccountResponse.displayName = 'proto.account_service.UnlockAccountResponse'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.UnlockAccountResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.UnlockAccountResponse.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.UnlockAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.UnlockAccountResponse.toObject = function(includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.UnlockAccountResponse}
 */
proto.account_service.UnlockAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.UnlockAccountResponse
  return proto.account_service.UnlockAccountResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.UnlockAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.UnlockAccountResponse}
 */
proto.account_service.UnlockAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.UnlockAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.UnlockAccountResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.UnlockAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.UnlockAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.RequestUnlockAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.RequestUnlockAccountRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.RequestUnlockAccountRequest.displayName = 'proto.account_service.RequestUnlockAccountRequest'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.RequestUnlockAccountRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.RequestUnlockAccountRequest.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.RequestUnlockAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.RequestUnlockAccountRequest.toObject = function(includeInstance, msg) {
    var f, obj = {
      email: jspb.Message.getFieldWithDefault(msg, 1, ''),
      password: jspb.Message.getFieldWithDefault(msg, 2, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.RequestUnlockAccountRequest}
 */
proto.account_service.RequestUnlockAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.RequestUnlockAccountRequest
  return proto.account_service.RequestUnlockAccountRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.RequestUnlockAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.RequestUnlockAccountRequest}
 */
proto.account_service.RequestUnlockAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString())
      msg.setEmail(value)
      break
    case 2:
      var value = /** @type {string} */ (reader.readString())
      msg.setPassword(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.RequestUnlockAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.RequestUnlockAccountRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.RequestUnlockAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.RequestUnlockAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getEmail()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getPassword()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
}


/**
 * optional string email = 1;
 * @return {string}
 */
proto.account_service.RequestUnlockAccountRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}


/** @param {string} value */
proto.account_service.RequestUnlockAccountRequest.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional string password = 2;
 * @return {string}
 */
proto.account_service.RequestUnlockAccountRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}


/** @param {string} value */
proto.account_service.RequestUnlockAccountRequest.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value)
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.RequestUnlockAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.RequestUnlockAccountResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.RequestUnlockAccountResponse.displayName = 'proto.account_service.RequestUnlockAccountResponse'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.RequestUnlockAccountResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.RequestUnlockAccountResponse.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.RequestUnlockAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.RequestUnlockAccountResponse.toObject = function(includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.RequestUnlockAccountResponse}
 */
proto.account_service.RequestUnlockAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.RequestUnlockAccountResponse
  return proto.account_service.RequestUnlockAccountResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.RequestUnlockAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.RequestUnlockAccountResponse}
 */
proto.account_service.RequestUnlockAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.RequestUnlockAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.RequestUnlockAccountResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.RequestUnlockAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.RequestUnlockAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.ListUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.account_service.ListUsersRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.ListUsersRequest.displayName = 'proto.account_service.ListUsersRequest'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.ListUsersRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.ListUsersRequest.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.ListUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.ListUsersRequest.toObject = function(includeInstance, msg) {
    var f, obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.ListUsersRequest}
 */
proto.account_service.ListUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.ListUsersRequest
  return proto.account_service.ListUsersRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.ListUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.ListUsersRequest}
 */
proto.account_service.ListUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.ListUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.ListUsersRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.ListUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.ListUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
}



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account_service.ListUsersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.account_service.ListUsersResponse.repeatedFields_, null)
}
goog.inherits(proto.account_service.ListUsersResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.account_service.ListUsersResponse.displayName = 'proto.account_service.ListUsersResponse'
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.account_service.ListUsersResponse.repeatedFields_ = [1]



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.account_service.ListUsersResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.account_service.ListUsersResponse.toObject(opt_includeInstance, this)
  }


  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account_service.ListUsersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.account_service.ListUsersResponse.toObject = function(includeInstance, msg) {
    var f, obj = {
      usersList: jspb.Message.toObjectList(msg.getUsersList(),
        proto.account_service.User.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account_service.ListUsersResponse}
 */
proto.account_service.ListUsersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.account_service.ListUsersResponse
  return proto.account_service.ListUsersResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account_service.ListUsersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account_service.ListUsersResponse}
 */
proto.account_service.ListUsersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
    case 1:
      var value = new proto.account_service.User
      reader.readMessage(value,proto.account_service.User.deserializeBinaryFromReader)
      msg.addUsers(value)
      break
    default:
      reader.skipField()
      break
    }
  }
  return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account_service.ListUsersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.account_service.ListUsersResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account_service.ListUsersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account_service.ListUsersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getUsersList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.account_service.User.serializeBinaryToWriter
    )
  }
}


/**
 * repeated User users = 1;
 * @return {!Array<!proto.account_service.User>}
 */
proto.account_service.ListUsersResponse.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.account_service.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.account_service.User, 1))
}


/** @param {!Array<!proto.account_service.User>} value */
proto.account_service.ListUsersResponse.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value)
}


/**
 * @param {!proto.account_service.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.account_service.User}
 */
proto.account_service.ListUsersResponse.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.account_service.User, opt_index)
}


proto.account_service.ListUsersResponse.prototype.clearUsersList = function() {
  this.setUsersList([])
}


goog.object.extend(exports, proto.account_service)
